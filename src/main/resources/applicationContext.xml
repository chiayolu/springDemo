<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "
		default-destroy-method="stop" default-init-method="start">
	<!-- 扫描包下的class文件，把@Component注解的bean注入到容器中 -->
	<context:component-scan base-package="com.my" />

	<!-- 加载数据库配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!-- 数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.initialSize}"></property>  
        <!-- 连接池最大激活数量 -->  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        <!-- 连接池最大空闲数量 -->  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        <!-- 连接池最小空闲数量 -->  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.maxWait}"></property>  
	</bean>


	<!-- SqlsessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" >
			<array>
				<value>classpath*:com/my/AccountOperation/mapper/*.xml</value>
			</array>
		</property>
		<!-- 给映射的类配置别名 -->  
        <!-- 默认的别名是model类的首字母小写 -->  
        <!-- 如：StaffDeploy实体类。别名为：staffDeploy -->  
<!--         <property name="typeAliasesPackage" value="com.my.AccountOperation.pojo" />  -->
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类。
		 MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
		  自动创建到spring容器中，bean的id是mapper的类名（首字母小写）-->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
    	<!-- 配置扫描包的路径。如果要扫描多个包，中间使用半角逗号分隔。 -->
        <property name="basePackage" value="com.my.AccountOperation.dao" /> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean> 
	
	<bean id="app" class="com.my.springDemo.App">
	</bean>
</beans>